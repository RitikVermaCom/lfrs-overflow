/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package panasonic.service.model.impl;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import panasonic.service.model.channel;
import panasonic.service.model.channelModel;
import panasonic.service.model.channelSoap;

/**
 * The base model implementation for the channel service. Represents a row in the &quot;Liferay_channel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>channelModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link channelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see channelImpl
 * @generated
 */
@JSON(strict = true)
public class channelModelImpl
	extends BaseModelImpl<channel> implements channelModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a channel model instance should use the <code>channel</code> interface instead.
	 */
	public static final String TABLE_NAME = "Liferay_channel";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"userName", Types.VARCHAR},
		{"name", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"password_", Types.VARCHAR}, {"otp", Types.VARCHAR},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"field4", Types.TIMESTAMP},
		{"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("otp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Liferay_channel (uuid_ VARCHAR(75) null,userName VARCHAR(75) not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,password_ VARCHAR(75) null,otp VARCHAR(75) null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Liferay_channel";

	public static final String ORDER_BY_JPQL = " ORDER BY channel.name ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Liferay_channel.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMAIL_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static channel toModel(channelSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		channel model = new channelImpl();

		model.setUuid(soapModel.getUuid());
		model.setUserName(soapModel.getUserName());
		model.setName(soapModel.getName());
		model.setEmail(soapModel.getEmail());
		model.setPassword(soapModel.getPassword());
		model.setOtp(soapModel.getOtp());
		model.setField1(soapModel.getField1());
		model.setField2(soapModel.isField2());
		model.setField3(soapModel.getField3());
		model.setField4(soapModel.getField4());
		model.setField5(soapModel.getField5());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<channel> toModels(channelSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<channel> models = new ArrayList<channel>(soapModels.length);

		for (channelSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public channelModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _userName;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setUserName(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userName;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return channel.class;
	}

	@Override
	public String getModelClassName() {
		return channel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<channel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<channel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<channel, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((channel)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<channel, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<channel, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(channel)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<channel, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<channel, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<channel, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<channel, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<channel, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<channel, Object>>();
		Map<String, BiConsumer<channel, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<channel, ?>>();

		attributeGetterFunctions.put("uuid", channel::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<channel, String>)channel::setUuid);
		attributeGetterFunctions.put("userName", channel::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<channel, String>)channel::setUserName);
		attributeGetterFunctions.put("name", channel::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<channel, String>)channel::setName);
		attributeGetterFunctions.put("email", channel::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<channel, String>)channel::setEmail);
		attributeGetterFunctions.put("password", channel::getPassword);
		attributeSetterBiConsumers.put(
			"password", (BiConsumer<channel, String>)channel::setPassword);
		attributeGetterFunctions.put("otp", channel::getOtp);
		attributeSetterBiConsumers.put(
			"otp", (BiConsumer<channel, String>)channel::setOtp);
		attributeGetterFunctions.put("field1", channel::getField1);
		attributeSetterBiConsumers.put(
			"field1", (BiConsumer<channel, String>)channel::setField1);
		attributeGetterFunctions.put("field2", channel::getField2);
		attributeSetterBiConsumers.put(
			"field2", (BiConsumer<channel, Boolean>)channel::setField2);
		attributeGetterFunctions.put("field3", channel::getField3);
		attributeSetterBiConsumers.put(
			"field3", (BiConsumer<channel, Integer>)channel::setField3);
		attributeGetterFunctions.put("field4", channel::getField4);
		attributeSetterBiConsumers.put(
			"field4", (BiConsumer<channel, Date>)channel::setField4);
		attributeGetterFunctions.put("field5", channel::getField5);
		attributeSetterBiConsumers.put(
			"field5", (BiConsumer<channel, String>)channel::setField5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserName() {
		return getColumnOriginalValue("userName");
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalEmail() {
		return getColumnOriginalValue("email");
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@JSON
	@Override
	public String getOtp() {
		if (_otp == null) {
			return "";
		}
		else {
			return _otp;
		}
	}

	@Override
	public void setOtp(String otp) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_otp = otp;
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public channel toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, channel>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		channelImpl channelImpl = new channelImpl();

		channelImpl.setUuid(getUuid());
		channelImpl.setUserName(getUserName());
		channelImpl.setName(getName());
		channelImpl.setEmail(getEmail());
		channelImpl.setPassword(getPassword());
		channelImpl.setOtp(getOtp());
		channelImpl.setField1(getField1());
		channelImpl.setField2(isField2());
		channelImpl.setField3(getField3());
		channelImpl.setField4(getField4());
		channelImpl.setField5(getField5());

		channelImpl.resetOriginalValues();

		return channelImpl;
	}

	@Override
	public int compareTo(channel channel) {
		int value = 0;

		value = getName().compareTo(channel.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof channel)) {
			return false;
		}

		channel channel = (channel)object;

		String primaryKey = channel.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<channel> toCacheModel() {
		channelCacheModel channelCacheModel = new channelCacheModel();

		channelCacheModel.uuid = getUuid();

		String uuid = channelCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			channelCacheModel.uuid = null;
		}

		channelCacheModel.userName = getUserName();

		String userName = channelCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			channelCacheModel.userName = null;
		}

		channelCacheModel.name = getName();

		String name = channelCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			channelCacheModel.name = null;
		}

		channelCacheModel.email = getEmail();

		String email = channelCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			channelCacheModel.email = null;
		}

		channelCacheModel.password = getPassword();

		String password = channelCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			channelCacheModel.password = null;
		}

		channelCacheModel.otp = getOtp();

		String otp = channelCacheModel.otp;

		if ((otp != null) && (otp.length() == 0)) {
			channelCacheModel.otp = null;
		}

		channelCacheModel.field1 = getField1();

		String field1 = channelCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			channelCacheModel.field1 = null;
		}

		channelCacheModel.field2 = isField2();

		channelCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			channelCacheModel.field4 = field4.getTime();
		}
		else {
			channelCacheModel.field4 = Long.MIN_VALUE;
		}

		channelCacheModel.field5 = getField5();

		String field5 = channelCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			channelCacheModel.field5 = null;
		}

		return channelCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<channel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<channel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<channel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((channel)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<channel, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<channel, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<channel, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((channel)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, channel>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					channel.class, ModelWrapper.class);

	}

	private String _uuid;
	private String _userName;
	private String _name;
	private String _email;
	private String _password;
	private String _otp;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<channel, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((channel)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("otp", _otp);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("password_", "password");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("userName", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("email", 8L);

		columnBitmasks.put("password_", 16L);

		columnBitmasks.put("otp", 32L);

		columnBitmasks.put("field1", 64L);

		columnBitmasks.put("field2", 128L);

		columnBitmasks.put("field3", 256L);

		columnBitmasks.put("field4", 512L);

		columnBitmasks.put("field5", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private channel _escapedModel;

}