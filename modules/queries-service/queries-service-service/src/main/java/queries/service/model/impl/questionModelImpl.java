/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package queries.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import queries.service.model.question;
import queries.service.model.questionModel;
import queries.service.model.questionSoap;

/**
 * The base model implementation for the question service. Represents a row in the &quot;queries_question&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>questionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link questionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see questionImpl
 * @generated
 */
@JSON(strict = true)
public class questionModelImpl
	extends BaseModelImpl<question> implements questionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a question model instance should use the <code>question</code> interface instead.
	 */
	public static final String TABLE_NAME = "queries_question";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"quesId", Types.BIGINT},
		{"quesTitle", Types.VARCHAR}, {"quesDesc", Types.VARCHAR},
		{"userName", Types.VARCHAR}, {"field1", Types.VARCHAR},
		{"field2", Types.BOOLEAN}, {"field3", Types.INTEGER},
		{"field4", Types.TIMESTAMP}, {"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quesTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quesDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table queries_question (uuid_ VARCHAR(75) null,quesId LONG not null primary key,quesTitle VARCHAR(75) null,quesDesc VARCHAR(75) null,userName VARCHAR(75) null,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table queries_question";

	public static final String ORDER_BY_JPQL = " ORDER BY question.quesId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY queries_question.quesId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUESID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static question toModel(questionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		question model = new questionImpl();

		model.setUuid(soapModel.getUuid());
		model.setQuesId(soapModel.getQuesId());
		model.setQuesTitle(soapModel.getQuesTitle());
		model.setQuesDesc(soapModel.getQuesDesc());
		model.setUserName(soapModel.getUserName());
		model.setField1(soapModel.getField1());
		model.setField2(soapModel.isField2());
		model.setField3(soapModel.getField3());
		model.setField4(soapModel.getField4());
		model.setField5(soapModel.getField5());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<question> toModels(questionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<question> models = new ArrayList<question>(soapModels.length);

		for (questionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public questionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _quesId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuesId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _quesId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return question.class;
	}

	@Override
	public String getModelClassName() {
		return question.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<question, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<question, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<question, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((question)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<question, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<question, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(question)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<question, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<question, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<question, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<question, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<question, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<question, Object>>();
		Map<String, BiConsumer<question, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<question, ?>>();

		attributeGetterFunctions.put("uuid", question::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<question, String>)question::setUuid);
		attributeGetterFunctions.put("quesId", question::getQuesId);
		attributeSetterBiConsumers.put(
			"quesId", (BiConsumer<question, Long>)question::setQuesId);
		attributeGetterFunctions.put("quesTitle", question::getQuesTitle);
		attributeSetterBiConsumers.put(
			"quesTitle", (BiConsumer<question, String>)question::setQuesTitle);
		attributeGetterFunctions.put("quesDesc", question::getQuesDesc);
		attributeSetterBiConsumers.put(
			"quesDesc", (BiConsumer<question, String>)question::setQuesDesc);
		attributeGetterFunctions.put("userName", question::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<question, String>)question::setUserName);
		attributeGetterFunctions.put("field1", question::getField1);
		attributeSetterBiConsumers.put(
			"field1", (BiConsumer<question, String>)question::setField1);
		attributeGetterFunctions.put("field2", question::getField2);
		attributeSetterBiConsumers.put(
			"field2", (BiConsumer<question, Boolean>)question::setField2);
		attributeGetterFunctions.put("field3", question::getField3);
		attributeSetterBiConsumers.put(
			"field3", (BiConsumer<question, Integer>)question::setField3);
		attributeGetterFunctions.put("field4", question::getField4);
		attributeSetterBiConsumers.put(
			"field4", (BiConsumer<question, Date>)question::setField4);
		attributeGetterFunctions.put("field5", question::getField5);
		attributeSetterBiConsumers.put(
			"field5", (BiConsumer<question, String>)question::setField5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getQuesId() {
		return _quesId;
	}

	@Override
	public void setQuesId(long quesId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quesId = quesId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuesId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("quesId"));
	}

	@JSON
	@Override
	public String getQuesTitle() {
		if (_quesTitle == null) {
			return "";
		}
		else {
			return _quesTitle;
		}
	}

	@Override
	public void setQuesTitle(String quesTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quesTitle = quesTitle;
	}

	@JSON
	@Override
	public String getQuesDesc() {
		if (_quesDesc == null) {
			return "";
		}
		else {
			return _quesDesc;
		}
	}

	@Override
	public void setQuesDesc(String quesDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quesDesc = quesDesc;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserName() {
		return getColumnOriginalValue("userName");
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, question.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public question toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, question>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		questionImpl questionImpl = new questionImpl();

		questionImpl.setUuid(getUuid());
		questionImpl.setQuesId(getQuesId());
		questionImpl.setQuesTitle(getQuesTitle());
		questionImpl.setQuesDesc(getQuesDesc());
		questionImpl.setUserName(getUserName());
		questionImpl.setField1(getField1());
		questionImpl.setField2(isField2());
		questionImpl.setField3(getField3());
		questionImpl.setField4(getField4());
		questionImpl.setField5(getField5());

		questionImpl.resetOriginalValues();

		return questionImpl;
	}

	@Override
	public int compareTo(question question) {
		int value = 0;

		if (getQuesId() < question.getQuesId()) {
			value = -1;
		}
		else if (getQuesId() > question.getQuesId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof question)) {
			return false;
		}

		question question = (question)object;

		long primaryKey = question.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<question> toCacheModel() {
		questionCacheModel questionCacheModel = new questionCacheModel();

		questionCacheModel.uuid = getUuid();

		String uuid = questionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			questionCacheModel.uuid = null;
		}

		questionCacheModel.quesId = getQuesId();

		questionCacheModel.quesTitle = getQuesTitle();

		String quesTitle = questionCacheModel.quesTitle;

		if ((quesTitle != null) && (quesTitle.length() == 0)) {
			questionCacheModel.quesTitle = null;
		}

		questionCacheModel.quesDesc = getQuesDesc();

		String quesDesc = questionCacheModel.quesDesc;

		if ((quesDesc != null) && (quesDesc.length() == 0)) {
			questionCacheModel.quesDesc = null;
		}

		questionCacheModel.userName = getUserName();

		String userName = questionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			questionCacheModel.userName = null;
		}

		questionCacheModel.field1 = getField1();

		String field1 = questionCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			questionCacheModel.field1 = null;
		}

		questionCacheModel.field2 = isField2();

		questionCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			questionCacheModel.field4 = field4.getTime();
		}
		else {
			questionCacheModel.field4 = Long.MIN_VALUE;
		}

		questionCacheModel.field5 = getField5();

		String field5 = questionCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			questionCacheModel.field5 = null;
		}

		return questionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<question, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<question, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<question, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((question)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<question, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<question, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<question, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((question)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, question>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					question.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _quesId;
	private String _quesTitle;
	private String _quesDesc;
	private String _userName;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<question, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((question)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("quesId", _quesId);
		_columnOriginalValues.put("quesTitle", _quesTitle);
		_columnOriginalValues.put("quesDesc", _quesDesc);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("quesId", 2L);

		columnBitmasks.put("quesTitle", 4L);

		columnBitmasks.put("quesDesc", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("field1", 32L);

		columnBitmasks.put("field2", 64L);

		columnBitmasks.put("field3", 128L);

		columnBitmasks.put("field4", 256L);

		columnBitmasks.put("field5", 512L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private question _escapedModel;

}