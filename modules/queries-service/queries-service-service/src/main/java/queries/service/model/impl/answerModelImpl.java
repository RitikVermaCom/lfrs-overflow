/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package queries.service.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

import queries.service.model.answer;
import queries.service.model.answerModel;
import queries.service.model.answerSoap;

/**
 * The base model implementation for the answer service. Represents a row in the &quot;queries_answer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>answerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link answerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see answerImpl
 * @generated
 */
@JSON(strict = true)
public class answerModelImpl
	extends BaseModelImpl<answer> implements answerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a answer model instance should use the <code>answer</code> interface instead.
	 */
	public static final String TABLE_NAME = "queries_answer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ansId", Types.BIGINT},
		{"ansTitle", Types.VARCHAR}, {"ansDesc", Types.VARCHAR},
		{"userName", Types.VARCHAR}, {"quesId", Types.BIGINT},
		{"field1", Types.VARCHAR}, {"field2", Types.BOOLEAN},
		{"field3", Types.INTEGER}, {"field4", Types.TIMESTAMP},
		{"field5", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ansId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ansTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ansDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quesId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("field1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("field2", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("field3", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("field4", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("field5", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table queries_answer (uuid_ VARCHAR(75) null,ansId LONG not null primary key,ansTitle VARCHAR(75) null,ansDesc VARCHAR(75) null,userName VARCHAR(75) null,quesId LONG,field1 VARCHAR(75) null,field2 BOOLEAN,field3 INTEGER,field4 DATE null,field5 VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table queries_answer";

	public static final String ORDER_BY_JPQL = " ORDER BY answer.ansId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY queries_answer.ansId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ANSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long QUESID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERNAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static answer toModel(answerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		answer model = new answerImpl();

		model.setUuid(soapModel.getUuid());
		model.setAnsId(soapModel.getAnsId());
		model.setAnsTitle(soapModel.getAnsTitle());
		model.setAnsDesc(soapModel.getAnsDesc());
		model.setUserName(soapModel.getUserName());
		model.setQuesId(soapModel.getQuesId());
		model.setField1(soapModel.getField1());
		model.setField2(soapModel.isField2());
		model.setField3(soapModel.getField3());
		model.setField4(soapModel.getField4());
		model.setField5(soapModel.getField5());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<answer> toModels(answerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<answer> models = new ArrayList<answer>(soapModels.length);

		for (answerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public answerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ansId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ansId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return answer.class;
	}

	@Override
	public String getModelClassName() {
		return answer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((answer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<answer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<answer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(answer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<answer, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<answer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<answer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<answer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<answer, Object>>();
		Map<String, BiConsumer<answer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<answer, ?>>();

		attributeGetterFunctions.put("uuid", answer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<answer, String>)answer::setUuid);
		attributeGetterFunctions.put("ansId", answer::getAnsId);
		attributeSetterBiConsumers.put(
			"ansId", (BiConsumer<answer, Long>)answer::setAnsId);
		attributeGetterFunctions.put("ansTitle", answer::getAnsTitle);
		attributeSetterBiConsumers.put(
			"ansTitle", (BiConsumer<answer, String>)answer::setAnsTitle);
		attributeGetterFunctions.put("ansDesc", answer::getAnsDesc);
		attributeSetterBiConsumers.put(
			"ansDesc", (BiConsumer<answer, String>)answer::setAnsDesc);
		attributeGetterFunctions.put("userName", answer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<answer, String>)answer::setUserName);
		attributeGetterFunctions.put("quesId", answer::getQuesId);
		attributeSetterBiConsumers.put(
			"quesId", (BiConsumer<answer, Long>)answer::setQuesId);
		attributeGetterFunctions.put("field1", answer::getField1);
		attributeSetterBiConsumers.put(
			"field1", (BiConsumer<answer, String>)answer::setField1);
		attributeGetterFunctions.put("field2", answer::getField2);
		attributeSetterBiConsumers.put(
			"field2", (BiConsumer<answer, Boolean>)answer::setField2);
		attributeGetterFunctions.put("field3", answer::getField3);
		attributeSetterBiConsumers.put(
			"field3", (BiConsumer<answer, Integer>)answer::setField3);
		attributeGetterFunctions.put("field4", answer::getField4);
		attributeSetterBiConsumers.put(
			"field4", (BiConsumer<answer, Date>)answer::setField4);
		attributeGetterFunctions.put("field5", answer::getField5);
		attributeSetterBiConsumers.put(
			"field5", (BiConsumer<answer, String>)answer::setField5);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAnsId() {
		return _ansId;
	}

	@Override
	public void setAnsId(long ansId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ansId = ansId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAnsId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("ansId"));
	}

	@JSON
	@Override
	public String getAnsTitle() {
		if (_ansTitle == null) {
			return "";
		}
		else {
			return _ansTitle;
		}
	}

	@Override
	public void setAnsTitle(String ansTitle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ansTitle = ansTitle;
	}

	@JSON
	@Override
	public String getAnsDesc() {
		if (_ansDesc == null) {
			return "";
		}
		else {
			return _ansDesc;
		}
	}

	@Override
	public void setAnsDesc(String ansDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_ansDesc = ansDesc;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUserName() {
		return getColumnOriginalValue("userName");
	}

	@JSON
	@Override
	public long getQuesId() {
		return _quesId;
	}

	@Override
	public void setQuesId(long quesId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quesId = quesId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalQuesId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("quesId"));
	}

	@JSON
	@Override
	public String getField1() {
		if (_field1 == null) {
			return "";
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field1 = field1;
	}

	@JSON
	@Override
	public boolean getField2() {
		return _field2;
	}

	@JSON
	@Override
	public boolean isField2() {
		return _field2;
	}

	@Override
	public void setField2(boolean field2) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field2 = field2;
	}

	@JSON
	@Override
	public int getField3() {
		return _field3;
	}

	@Override
	public void setField3(int field3) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field3 = field3;
	}

	@JSON
	@Override
	public Date getField4() {
		return _field4;
	}

	@Override
	public void setField4(Date field4) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field4 = field4;
	}

	@JSON
	@Override
	public String getField5() {
		if (_field5 == null) {
			return "";
		}
		else {
			return _field5;
		}
	}

	@Override
	public void setField5(String field5) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_field5 = field5;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, answer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public answer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, answer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		answerImpl answerImpl = new answerImpl();

		answerImpl.setUuid(getUuid());
		answerImpl.setAnsId(getAnsId());
		answerImpl.setAnsTitle(getAnsTitle());
		answerImpl.setAnsDesc(getAnsDesc());
		answerImpl.setUserName(getUserName());
		answerImpl.setQuesId(getQuesId());
		answerImpl.setField1(getField1());
		answerImpl.setField2(isField2());
		answerImpl.setField3(getField3());
		answerImpl.setField4(getField4());
		answerImpl.setField5(getField5());

		answerImpl.resetOriginalValues();

		return answerImpl;
	}

	@Override
	public int compareTo(answer answer) {
		int value = 0;

		if (getAnsId() < answer.getAnsId()) {
			value = -1;
		}
		else if (getAnsId() > answer.getAnsId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof answer)) {
			return false;
		}

		answer answer = (answer)object;

		long primaryKey = answer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<answer> toCacheModel() {
		answerCacheModel answerCacheModel = new answerCacheModel();

		answerCacheModel.uuid = getUuid();

		String uuid = answerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			answerCacheModel.uuid = null;
		}

		answerCacheModel.ansId = getAnsId();

		answerCacheModel.ansTitle = getAnsTitle();

		String ansTitle = answerCacheModel.ansTitle;

		if ((ansTitle != null) && (ansTitle.length() == 0)) {
			answerCacheModel.ansTitle = null;
		}

		answerCacheModel.ansDesc = getAnsDesc();

		String ansDesc = answerCacheModel.ansDesc;

		if ((ansDesc != null) && (ansDesc.length() == 0)) {
			answerCacheModel.ansDesc = null;
		}

		answerCacheModel.userName = getUserName();

		String userName = answerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			answerCacheModel.userName = null;
		}

		answerCacheModel.quesId = getQuesId();

		answerCacheModel.field1 = getField1();

		String field1 = answerCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			answerCacheModel.field1 = null;
		}

		answerCacheModel.field2 = isField2();

		answerCacheModel.field3 = getField3();

		Date field4 = getField4();

		if (field4 != null) {
			answerCacheModel.field4 = field4.getTime();
		}
		else {
			answerCacheModel.field4 = Long.MIN_VALUE;
		}

		answerCacheModel.field5 = getField5();

		String field5 = answerCacheModel.field5;

		if ((field5 != null) && (field5.length() == 0)) {
			answerCacheModel.field5 = null;
		}

		return answerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((answer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((answer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, answer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					answer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _ansId;
	private String _ansTitle;
	private String _ansDesc;
	private String _userName;
	private long _quesId;
	private String _field1;
	private boolean _field2;
	private int _field3;
	private Date _field4;
	private String _field5;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<answer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((answer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("ansId", _ansId);
		_columnOriginalValues.put("ansTitle", _ansTitle);
		_columnOriginalValues.put("ansDesc", _ansDesc);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("quesId", _quesId);
		_columnOriginalValues.put("field1", _field1);
		_columnOriginalValues.put("field2", _field2);
		_columnOriginalValues.put("field3", _field3);
		_columnOriginalValues.put("field4", _field4);
		_columnOriginalValues.put("field5", _field5);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("ansId", 2L);

		columnBitmasks.put("ansTitle", 4L);

		columnBitmasks.put("ansDesc", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("quesId", 32L);

		columnBitmasks.put("field1", 64L);

		columnBitmasks.put("field2", 128L);

		columnBitmasks.put("field3", 256L);

		columnBitmasks.put("field4", 512L);

		columnBitmasks.put("field5", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private answer _escapedModel;

}